# Query: retire
# ContextLines: 1

72 results - 4 files

package-lock.json:
  1  {
  2:   "name": "when-can-i-retire",
  3    "version": "0.1.0",

  7      "": {
  8:       "name": "when-can-i-retire",
  9        "version": "0.1.0",

package.json:
  1  {
  2:   "name": "when-can-i-retire",
  3    "version": "0.1.0",

src\app\App.css:
  115  
  116: .retirement-result {
  117      padding: 16px;

  120  
  121: .retirement-result.success {
  122      background-color: #e8f5e9;

  125  
  126: .retirement-result.warning {
  127      background-color: #fff3cd;

  130  
  131: .retirement-title {
  132      font-size: 18px;

  136  
  137: .retirement-age {
  138      font-size: 32px;

  143  
  144: .retirement-subtext {
  145      color: #666;

src\app\page.tsx:
   25    const [incomeEndAge, setIncomeEndAge] = useState('');
   26:   const [incomeEndsAtRetirement, setIncomeEndsAtRetirement] = useState(false);
   27  

   32    const [expenseEndAge, setExpenseEndAge] = useState('');
   33:   const [expenseEndsAtRetirement, setExpenseEndsAtRetirement] = useState(false);
   34  

   51      try {
   52:       const savedData = localStorage.getItem('retirementData');
   53        if (savedData) {

   78        };
   79:       localStorage.setItem('retirementData', JSON.stringify(data));
   80      } catch (error) {

  115        endAge: incomeEndAge ? parseInt(incomeEndAge) : null,
  116:       endsAtRetirement: incomeEndsAtRetirement
  117      };

  121      setIncomeEndAge('');
  122:     setIncomeEndsAtRetirement(false);
  123    };

  134        endAge: expenseEndAge ? parseInt(expenseEndAge) : null,
  135:       endsAtRetirement: expenseEndsAtRetirement
  136      };

  140      setExpenseEndAge('');
  141:     setExpenseEndsAtRetirement(false);
  142    };

  158    // Calculate active income/expenses at a given age
  159:   const getActiveIncomeAtAge = (age, retirementAge = null) => {
  160      return incomes.reduce((sum, income) => {
  161:       if (income.endsAtRetirement && retirementAge && age >= retirementAge) return sum;
  162        if (income.endAge && age >= income.endAge) return sum;

  166  
  167:   const getActiveExpensesAtAge = (age, retirementAge = null) => {
  168      return expenses.reduce((sum, expense) => {
  169:       if (expense.endsAtRetirement && retirementAge && age >= retirementAge) return sum;
  170        if (expense.endAge && age >= expense.endAge) return sum;

  177    };
  178:   // Calculate retirement projection
  179:   const retirementData = useMemo(() => {
  180      const age = parseInt(currentAge) || 30;

  187      const costWithInflation = getCostWithInflation(((totalMonthlyExpenses) * 12), inflation, (maxAge - age));
  188:     let retirementAge = (
  189        (

  196      for (let year = 0; projectedAge <= maxAge; year++, projectedAge++) {
  197:       const activeIncome = getActiveIncomeAtAge(projectedAge, retirementAge);
  198:       const activeExpenses = getActiveExpensesAtAge(projectedAge, retirementAge);
  199        const adjustedMonthlySavings = activeIncome - activeExpenses;

  204          netWorth: Math.round(currentNetWorth),
  205:         canRetire: false
  206        });

  209      return {
  210:       canRetire: retirementAge !== null,
  211:       retirementAge,
  212        dataPoints

  218        <header className="header">
  219:         <h1>Retirement Simulator</h1>
  220        </header>

  300              <section className="section">
  301:               <h2>Retirement Projection</h2>
  302:               {retirementData.canRetire ? (
  303:                 <div className="retirement-result success">
  304:                   <div className="retirement-title">üéâ You can retire at age:</div>
  305:                   <div className="retirement-age">{retirementData?.retirementAge ?? ""}</div>
  306:                   <div className="retirement-subtext">
  307:                     Monthly retirement expenses: ${getActiveExpensesAtAge(parseInt(currentAge), parseInt(currentAge)).toLocaleString()}
  308                    </div>

  310                ) : (
  311:                 <div className="retirement-result warning">
  312:                   <div className="retirement-title">‚ö†Ô∏è Unable to retire by age 100</div>
  313:                   <div className="retirement-subtext">
  314:                     With current savings rate, you may not reach retirement goals.
  315                    </div>
  316:                   <div className="retirement-subtext">
  317                      Consider increasing income or reducing expenses.

  322  
  323:             {retirementData.dataPoints.length > 0 && (
  324                <section className="section">

  326                  <ResponsiveContainer width="100%" height={300}>
  327:                   <LineChart data={retirementData.dataPoints}>
  328                      <CartesianGrid strokeDasharray="3 3" />

  442                      type="checkbox"
  443:                     checked={incomeEndsAtRetirement}
  444:                     onChange={(e) => setIncomeEndsAtRetirement(e.target.checked)}
  445                    />
  446:                   Ends at retirement
  447                  </label>
  448                </div>
  449:               {!incomeEndsAtRetirement && (
  450                  <input

  467                        <div className="list-item-value positive">${income.value.toLocaleString()}/mo</div>
  468:                       {income.endsAtRetirement && (
  469:                         <div className="list-item-detail">Ends at retirement</div>
  470                        )}
  471:                       {income.endAge && !income.endsAtRetirement && (
  472                          <div className="list-item-detail">Ends at age {income.endAge}</div>

  502                      type="checkbox"
  503:                     checked={expenseEndsAtRetirement}
  504:                     onChange={(e) => setExpenseEndsAtRetirement(e.target.checked)}
  505                    />
  506:                   Ends at retirement
  507                  </label>
  508                </div>
  509:               {!expenseEndsAtRetirement && (
  510                  <input

  527                        <div className="list-item-value negative">${expense.value.toLocaleString()}/mo</div>
  528:                       {expense.endsAtRetirement && (
  529:                         <div className="list-item-detail">Ends at retirement</div>
  530                        )}
  531:                       {expense.endAge && !expense.endsAtRetirement && (
  532                          <div className="list-item-detail">Ends at age {expense.endAge}</div>
